运行maven命令实际上是执行了Java命令
通常需要设置MAVEN_OPT的值为 - Xms128m -Xmx512m,因为java默认的最大可用内存往往不能满足Maven运行的需要

maven 配置文件：
    全局：M2_HOME/conf/settings.xml
    用户范围： ~/.m2/settings.xml

POM（项目对象模型） ： project object model     （生成的jar文件名默认是  artifactId-version[-classifier].jar）
    groupId:项目所在的组织或公司
    artifactId:组中唯一id（一个maven项目/模块，推荐使用实际项目名作为其前缀，比如nexus-indexer，前缀是nexus），默认情况下，maven生成的构件，其文件名会以artifactId作为开头，如nexus-indexer-2.0.0.jar
    version:maven项目当前所处的版本
    name:对于用户更为友好的项目名称
    package:定义maven打包方式 （jar、war等）
    classifier:帮助定义构件输出的一些附属构建（即 在生成的jar的名字加一个后缀，如nexus-indexer-2.0.0-xxx.jar），不能直接定义项目的classifier，该构件不是项目直接生成的，而是由附加的插件帮助生成的
    soup:依赖范围：
            compile: 编译依赖范围（默认），对于编译、测试、运行三种classpath都有效
            test:测试依赖范围，只对于测试classpath有效
            provided:以提供依赖范围，对于编译、测试classpath有效
            runtime:运行时依赖范围，测试、运行classpath有效，在编译主代码时无效
            system:系统依赖范围，和provided一样，但必须通过systemPath元素显示地指定依赖文件的路径
                   如： <soup>system</system>
                       <systemPath>${java.home}/lib/rt.jar</systemPath>
    optional:可选依赖，在依赖传递时，可能一个模块依赖的两个模块依赖的某些依赖不想沿用，此时传递就可在被依赖的依赖上添加此标签<optional>true</optional>  (true代表不传递该依赖)
    exclusions:排除依赖 如：
            <exclusions>
                <exclusion>
                    <groupId>xxx</groupId>
                    <artifactId>xx</artifactId>
                </exclusion>
            </exclusions>
    依赖调解：
            第一原则：当依赖多个模块又重复的依赖时，路径最近的优先被传递 (如: A->B->C->X(1.0)->D->X(2.0),则会选择X(1.0))
            第二原则：第一原则优先，当依赖路径长度一样，从Maven 2.0.9版本开始，在pom中依赖声明的顺序决定谁会被解析 （如 A->B->Y(1.0) X(1.0)、A->C->X(2.0),则X(2.0会被引用)）
    优化依赖：
            maven会自动解析所有项目的直接依赖和传递依赖，对一些依赖冲突进行调节，以确保一个构件只有唯一的版本在依赖中存在,maven解析后会生成一个依赖树，通过树就能看到某个依赖是通过哪条传递路径引入的

仓库：
    自定义本地仓库目录地址，可编辑 ~/.m2/settings.xml 设置(默认情况该文件是不存在的，需从Maven的安装目录复制 $M2_HOME/conf/settings.xml【此文件为全局xml文件】)
        <settings>
            <localRepository>/xxx/xxx/repository</localRepository>
        </settings>
    配置远程仓库：
        <project>
            ...
            <repositories>
                <id>jboss</id>
                <name>JBoss Repository</name>
                <url>http://xxxxx.com/maven2/</url>
                <releases>
                    <enabled>true</enabled>
                </releases>
                <snapshots>
                    <enabled>false</enabled>
                    <updatePolicy>daily</updatePolicy>    //用来配置maven从远程仓库检查更新的频率，默认是daily（never:从不、always:每次构件都检查更新、interval:X:每隔X分钟检查一次更新）
                    <checksumPolicy>ignore</checksumPolicy> //用来配置maven检查检验和文件的策略，当构件被部署到maven仓库中时，会同时部署对应的校验和文件，在下载构件时会验证校验和文件，如果验证失败，当checksumPolicy为默认的warn时，输出警告信息（fail:让构件失败、ignored:完全忽略）
                </snapshots>
                <layout>default</layout>
            </repositories>
        </project>

        任何一个仓库声明的id必须是唯一的，maven自带的中央仓库id为center，如果其他的仓库声明也适用该id就会覆盖中央仓库的配置。
        release的enable为true表示开启JBoss仓库的发布版本下载支持，而snapshots的enabled为false，表示关闭JBoss仓库的快照版本的下载支持，maven只会从JBoss仓库下载发布版本的构件
        对于release和snapshot来说除了enabled还有另外两个自元素 updatePolicy和checksumPolicy

命令(项目根目录)：
    mvn clean compile ： 编译
    mvn clean test : 测试
    mvn clean package : 打包，默认打包类型jar
    mvn clean install : 安装,下载依赖到本地
    jar -xvf xxx.jar : 解压jar包
    mvn dependency:list : 查看当前项目以解析的依赖(对应上面的优化依赖)
    mvn dependency:tree : 查看当前项目以解析的依赖树(对应上面的优化依赖)
    mvn dependency:analyze : （编译主代码和测试代码需要用到的依赖： import声明。一些测试和运行时需要的依赖他就发现不了了，如spring-core和spring-beans是运行Spring Framework必要的类库）
        Used undeclared dependencies found:使用到的，但没有显示声明的依赖(依赖中的依赖)，可能存在潜在的风险，当升级直接依赖时，相关传递性的依赖版本也可能发生变化
        Unused declared dependencies found:声明但未使用的

自定义本地仓库目录地址可编辑文件~/.m2/settings.xml，设置localRepository:
    <settings>
        <localRepository>/Users/lsy/.m2/repository</localRepository>
    </settings>

releases和snapshot
    <snapshots>
        <enabled>true</enabled>                 //是否开启快照版本的下载支持
        <updatePolicy>daily</updatePolicy>      //配置Maven从远程仓库检查更新的频率，默认值是daily每天检查一次（never、always-每次构建都检查更新、interval: -X -每隔X分钟检查一次更新）
        <checksumPolicy>ignore<checksumPolicy>  //配置Maven检查检验和稳健的策略。
    <snapshots>

    如将模块的版本设定为2.1-SNAPSHOT，然后发布到私服中，在发布过程中，Maven会自动为构建打上时间戳。比如2.1-20091214.221414-13就表示2009年12月14日22点14分14秒的第13次快照。有了该时间戳
    Maven就能随时找到仓库中该构件2.1-SNAPSHOT的最新构件，默认每天检查一次更新，也可使用 mvn clean install-U 强制让mavne检查更新，当项目经过完善的测试后需要发布的时候，就应该将快照版本更改为发布版本。例如将2.1-SNAPSHOT更改为2.1
    当依赖的范围是system时，maven直接从本地文件系统解析构建
    如果依赖版本是RELEASE或者LATEST，则基于更新策略读取所有的远程仓库的原数据groupId/artifactId/maven-metadata.xml,将其与本地仓库的对应原数据合并后，计算出RELEASE或者LATEST真实的值，然后基于这个真实的值检查本地和远程仓库
