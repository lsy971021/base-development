运行maven命令实际上是执行了Java命令
通常需要设置MAVEN_OPT的值为 - Xms128m -Xmx512m,因为java默认的最大可用内存往往不能满足Maven运行的需要

maven 配置文件：
    全局：M2_HOME/conf/settings.xml
    用户范围： ~/.m2/settings.xml

POM（项目对象模型） ： project object model     （生成的jar文件名默认是  artifactId-version[-classifier].jar）
    groupId:项目所在的组织或公司
    artifactId:组中唯一id（一个maven项目/模块，推荐使用实际项目名作为其前缀，比如nexus-indexer，前缀是nexus），默认情况下，maven生成的构件，其文件名会以artifactId作为开头，如nexus-indexer-2.0.0.jar
    version:maven项目当前所处的版本
    name:对于用户更为友好的项目名称
    package:定义maven打包方式 （jar、war等）
    classifier:帮助定义构件输出的一些附属构建（即 在生成的jar的名字加一个后缀，如nexus-indexer-2.0.0-xxx.jar），不能直接定义项目的classifier，该构件不是项目直接生成的，而是由附加的插件帮助生成的
    soup:依赖范围：
            compile: 编译依赖范围（默认），对于编译、测试、运行三种classpath都有效
            test:测试依赖范围，只对于测试classpath有效
            provided:以提供依赖范围，对于编译、测试classpath有效
            runtime:运行时依赖范围，测试、运行classpath有效，在编译主代码时无效
            system:系统依赖范围，和provided一样，但必须通过systemPath元素显示地指定依赖文件的路径
                   如： <soup>system</system>
                       <systemPath>${java.home}/lib/rt.jar</systemPath>
    optional:可选依赖，在依赖传递时，可能一个模块依赖的两个模块依赖的某些依赖不想沿用，此时传递就可在被依赖的依赖上添加此标签<optional>true</optional>  (true代表不传递该依赖)
    exclusions:排除依赖 如：
            <exclusions>
                <exclusion>
                    <groupId>xxx</groupId>
                    <artifactId>xx</artifactId>
                </exclusion>
            </exclusions>
    依赖调解：
            第一原则：当依赖多个模块又重复的依赖时，路径最近的优先被传递 (如: A->B->C->X(1.0)->D->X(2.0),则会选择X(1.0))
            第二原则：第一原则优先，当依赖路径长度一样，从Maven 2.0.9版本开始，在pom中依赖声明的顺序决定谁会被解析 （如 A->B->Y(1.0) X(1.0)、A->C->X(2.0),则X(2.0会被引用)）

命令(项目根目录)：
    mvn clean compile ： 编译
    mvn clean test : 测试
    mvn clean package : 打包，默认打包类型jar
    mvn clean install : 安装,下载依赖到本地
    jar -xvf xxx.jar : 解压jar包